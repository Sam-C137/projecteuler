package divisible_triangular_number

// Run The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
// 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//	1: 1
//	3: 1, 3
//	6: 1, 2, 3, 6
//	10: 1, 2, 5, 10
//	15: 1, 3, 5, 15
//	21: 1, 3, 7, 21
//	28: 1, 2, 4, 7, 14, 28
//
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?
func Run(max int) int {
	found := 0
	n := 1

	for {
		// for a triangle number one of n or (n + 1) must be even, we can split the calculation
		n1 := n
		n2 := n + 1

		if n1%2 == 0 {
			n1 /= 2
		} else {
			n2 /= 2
		}

		factors := len(getFactors(n1)) * len(getFactors(n2))
		if factors >= max {
			found = n * (n + 1) / 2
			break
		}
		n++
	}

	return found
}

func getFactors(num int) []int {
	factors := make([]int, 0, num)

	for i := 1; i*i <= num; i++ {
		if num%i == 0 {
			factors = append(factors, i)

			if i*i != num {
				factors = append(factors, num/i)
			}
		}
	}

	return factors
}
